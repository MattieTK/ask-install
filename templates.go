// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x41\xae\x83\x30\x0c\x44\xf7\x3e\xc5\x48\x7f\xff\xb3\xc9\x8a\x13\xf4\x1a\x16\x4d\x15\x04\x24\x28\x71\xd4\xa2\x28\x77\xaf\x0a\xa1\xad\xa0\xac\xac\x19\xdb\x6f\x26\x67\xfc\x5f\x7c\x14\xc7\xa3\x41\x29\xc8\x44\xc0\x1f\x38\xf6\x57\x4c\xc1\x3f\x66\xc2\x3a\xa1\x5e\x9e\x82\x15\x99\x1a\x55\x45\x26\x00\xb8\x77\x62\x7d\x92\xf5\x62\x71\x24\xb0\x8b\x13\x07\xe3\x84\x80\xb2\x32\xcd\xd0\x5b\x1f\xdc\x1e\x5b\xed\x37\xb9\xea\x46\x6b\xad\x0f\x09\x75\x79\x1e\xc2\x49\xec\xa1\x78\x12\xfb\x29\xbe\x88\x7d\xf1\x24\xf6\x9c\xd9\xf2\x17\x6c\xe3\xb4\x3c\x6f\x98\x9f\x4f\x51\x58\xba\x16\xb7\x6e\x30\x91\x80\xe0\xbd\x40\x59\x19\x07\x2a\xf4\x0c\x00\x00\xff\xff\x10\x7f\xee\x7c\x75\x01\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 373, mode: os.FileMode(420), modTime: time.Unix(1476810209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x51\x6f\xda\x30\x10\x7e\xcf\xaf\xb0\xe8\x43\x9f\xc0\xdd\x5a\x4d\x53\xa4\x3c\x30\x96\x51\xd4\x94\xa0\x10\xba\xf6\x29\x32\xc9\x51\x32\x82\x8d\x6c\x97\x0e\x55\xfc\xf7\xc9\x0e\x24\xa6\x21\x29\xed\xda\x0a\x29\xe7\xfb\xec\xbb\xfb\xee\xf3\x79\x0d\x5c\xa4\x8c\xda\xe8\xfc\xeb\xb9\x65\x9d\xd5\xfe\x59\x67\x68\x0c\x7c\x9d\xc6\x20\x9a\x50\x96\xd8\x81\x6c\xcb\x42\x28\x26\x1b\xdb\x42\x08\xa1\x74\x49\x1e\xc1\x46\x31\xe3\x24\x5b\x71\xf6\x07\x62\x89\x63\xb2\xd1\x3e\x0e\x42\x12\x2e\x6d\x44\xb2\x67\xb2\x11\x7a\x0d\xe8\x3a\x9a\xa5\x19\xe4\xbb\x11\x6a\xa3\x97\x17\xd4\xe9\x31\x3a\x4b\x1f\x7f\xa5\x19\x50\xb2\x04\xb4\xdd\x6a\x2f\x05\xf9\xcc\xf8\x42\x94\xd8\x29\x89\x17\x6d\x31\x87\x6c\xa6\x92\x20\x62\x91\xd4\x67\xa1\xbc\x4d\x69\xa4\x9c\xd1\x25\x50\x59\x9e\xde\xea\x8e\x6f\xa2\x6b\x7f\x1c\x3a\x17\x1d\xfd\x6f\x7f\xbf\x68\x1d\x7a\x3d\xbf\xdf\x1f\x0c\xfb\x91\xe7\xde\xb9\x9e\xf3\xe5\x95\xf7\xd6\x1f\xf6\xfd\x68\x12\x0c\x9c\x25\xa3\x8f\x2c\x99\xda\x18\xeb\x6c\xdb\xda\xc6\x12\x84\x7c\xb5\xc5\x1d\x76\x7f\x78\x6e\xd4\xf3\x83\xb1\x13\x06\x13\xb7\xf5\xb9\x2c\xa9\x85\x04\x56\x40\x13\x11\x31\x5a\x42\x8c\xac\x14\x93\x90\x2d\xe6\x8c\xd3\x7a\x32\xf7\x80\x8c\xa8\x1a\x3e\x40\xeb\x24\xf0\x9c\xb9\x94\x2b\x1b\xeb\xc6\xbc\xbf\xcc\x35\xcb\x9e\x96\x60\x54\xd9\x29\x92\xc2\x4f\x82\x63\xc1\x63\x4c\x56\x2b\xfc\x71\x4e\xb4\x60\x94\xac\x9e\xe4\xbc\x41\xdc\xca\x68\x2b\xcc\x3b\x59\xe8\xf9\x41\xd7\x8b\xba\x93\xf0\x3a\x1a\xf9\x41\xe8\x1c\x68\xcb\x70\x86\xc1\x64\x1c\x46\xa3\xc0\xbf\x7f\x30\x14\x51\x41\xf9\x37\xee\x30\x72\xef\x47\x83\xe0\x21\x0a\x07\xb7\xae\x73\xf9\x0d\xcd\xf9\x71\xf0\x5e\x97\x9e\xa1\x4b\x55\x41\x45\x96\x9f\xa0\xbb\x82\x99\xa3\x14\x17\x41\x15\xd1\x0d\xd3\x06\xa1\x33\xf4\x93\x48\x32\x25\x02\x44\x33\xd4\x42\xa6\x9a\x0f\x1a\x97\x47\xaa\x6b\x53\x45\x51\xe6\x31\x38\x21\x92\xe0\x64\x7a\xda\x20\x2a\xca\xfa\x9f\xf0\xc6\x29\xa7\x44\xd7\x44\xbf\xcd\xe2\x6f\x98\xea\xf9\x0e\xfc\x6d\x1e\x63\x92\x24\x87\x73\x9d\x4c\x53\x26\xd8\x4c\xcd\xf4\x24\xd9\xd4\x5d\xc4\x9e\x72\x6a\xdd\x60\x90\x71\x69\x16\x10\xbd\xbb\x1d\x03\x97\xc2\xc6\x9c\x31\x89\x3b\xe5\x81\x2b\xa6\x96\x4b\xe1\xee\x87\xaf\x92\xde\x88\x71\x89\xb6\x5b\xf3\xbb\x55\x45\x5e\x5d\x5d\xaa\x5f\xab\x96\x2e\x21\x53\x46\x6b\x74\x7a\xea\x74\x30\xf1\xc5\xdb\xa2\x8c\xdd\x18\x32\x8a\xdd\x9c\xf6\xde\xa2\xe1\x2e\xd5\xc6\x77\xd7\xac\x67\x57\x49\xfe\xb9\x4f\xb9\xb0\xf2\xc1\x75\x5a\xe8\xbb\xbc\x8b\x8d\x91\x8b\x4e\xef\xa5\xb1\xeb\x60\x3e\x2a\xfe\x4a\xe0\x94\x64\x36\x9a\x91\x4c\xc0\x91\x5b\x50\x45\x54\xee\xe9\x6b\xc8\xbf\x00\x00\x00\xff\xff\x79\x31\xad\xb2\xb4\x08\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 2228, mode: os.FileMode(420), modTime: time.Unix(1476809986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x6f\xeb\x20\x10\x84\xef\xfc\x8a\x79\xe4\x8c\x73\xcf\xf5\xe5\x5d\xa3\x48\xd1\xfb\x01\x5b\xbc\xa9\x57\xc5\x60\xb1\x38\x6e\x15\xf9\xbf\x57\xd8\xb5\xd2\xa6\x27\x58\x66\xd8\x6f\x66\xf7\x67\xff\x22\x71\xaf\x9d\x31\xca\x05\x8e\x8d\x61\xdf\x25\xd8\xbf\x99\xa9\x48\x7c\x45\xe9\x18\xca\xf9\x26\x9e\x15\x31\x4d\x07\xbb\x59\xac\x31\x3b\x5c\x0a\xe5\xf2\xc3\xd4\x98\x36\xf9\x37\xce\xce\xa7\x7e\x48\xca\x18\x07\xb8\xf6\xf1\x69\x3d\x2f\xdb\x4a\x5f\x41\xdc\x36\x38\xa5\x69\x1d\x2a\x75\x54\xce\x07\xfb\x1d\xb4\x04\xe2\x85\x54\xc5\x5f\x94\x3c\x46\x38\x97\x7b\xd0\x58\x3a\xf8\x20\x5f\x9b\xe1\xae\x70\x8e\x7b\x92\x00\x7b\xbf\xa3\xf9\xb7\x5c\xe7\xd9\xc2\xb9\x81\x54\xa7\x94\xdb\x55\x39\x6f\xd3\x2a\x46\xea\x79\x15\x8e\xa2\x43\xa0\x8f\x53\x7d\x98\x67\xfb\xdc\xe5\xbf\x72\xc6\x44\x8f\x2e\xf6\xc9\x70\x4c\x91\x1b\x9c\x03\x53\x0d\xca\x7d\xba\xd5\x22\xa2\xb8\x4a\x60\x90\x42\x0a\x7c\x8a\x85\x24\xea\xd2\x70\x08\x24\xb1\xf0\x7b\xc1\x96\xb0\xb1\xe6\x33\x00\x00\xff\xff\xa8\x20\x34\xbd\xac\x01\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 428, mode: os.FileMode(420), modTime: time.Unix(1476807821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

