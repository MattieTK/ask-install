// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcf\x6a\xe3\x30\x10\x87\xef\x7a\x8a\x1f\xf8\xba\x8e\x0f\xcd\xa9\xb7\x42\xbc\xbb\x85\x25\x81\x26\xbd\x57\x6b\x8f\x63\x11\x55\x0a\x9a\x71\xdd\x62\xfc\xee\x8b\xa5\x34\x6d\xf3\x87\xb2\x27\x33\x33\xd2\x7c\xf3\x69\x9c\x61\xb1\xc2\x72\xb5\x41\xb9\xb8\xdf\xe0\xe7\xfd\x9f\xf2\x07\xee\x1e\x37\xab\x5f\xe5\xb2\x7c\xb8\xdb\x94\x8b\x99\xca\x54\x86\x07\xea\x98\x20\x2d\x41\xf3\x2e\x37\x8e\x45\x5b\x0b\xdd\x08\x05\x50\x6d\xc4\xb8\x6d\xac\x56\xde\x35\x66\x8b\xc6\x58\x82\x76\x35\x02\xe5\xa1\x73\xa7\x17\x55\x06\xf1\xde\xa2\x37\xd2\xe2\x29\xe7\xa7\xdb\x08\xf9\xd2\x3b\x67\x95\x29\x35\x0c\x98\xfd\xf6\x2c\x4e\x3f\x13\xc6\x11\x83\x52\x80\xf5\x5b\xb0\xd4\xbe\x93\x29\x1a\x06\x98\x06\xb3\xb5\xd5\xd5\x6e\xe9\xc5\x34\xa6\xd2\x62\xbc\xe3\xd2\xe9\xbf\x96\x6a\xe4\xe3\xa8\x80\x0c\x3c\x9d\xa8\x27\x48\x8d\x7d\xf0\xaf\x6f\x0a\xe9\x8b\x62\xca\x15\x68\x45\xf6\xb7\x45\x11\xcf\x15\x18\x14\x80\x38\xa2\xef\x24\x1d\x89\x19\x09\xda\xf1\x5e\x07\x72\xa2\x80\x31\x4e\x90\x83\x2c\xd3\x91\xf4\x2d\x22\x05\xff\x49\x70\x35\xc6\x51\x45\x00\xd9\x5d\xeb\x83\x3b\x65\x1c\xd2\x47\xcc\x21\xbe\x9d\xcf\xe7\xf3\x33\xdc\xa1\x78\x91\x98\x2c\x3a\x69\xcf\x2c\x3a\x69\x3f\x2c\x62\x70\x6a\xd1\x49\x7b\xad\x67\x5a\x95\xf3\x82\xd9\x23\xd3\xfa\xe6\x63\x35\xa2\xc5\x54\xf1\xb7\x61\x05\x04\xef\x05\xc5\x8b\x0e\x45\xdf\xf7\x97\x1e\x78\x61\x38\xed\x56\x33\xd6\x37\xe8\x35\x83\xd2\xb6\x63\xf9\xac\x61\x76\xb9\xe5\xa7\x17\xad\xf4\x27\xcb\x77\xc1\x4a\xbf\xbd\xfb\x5d\x19\x7d\xba\xba\xa6\xf0\x42\x8c\xde\xd4\x5b\x12\xb4\xf2\x6c\x63\x81\x5e\x2b\xda\x0b\x8a\x94\xe7\x43\x97\x2f\x22\xdf\xaa\x24\x99\x2b\x80\xec\x3a\xe2\x28\x76\x61\x0d\xa3\xfa\x17\x00\x00\xff\xff\x70\xa5\x12\xc5\xf4\x03\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 1012, mode: os.FileMode(420), modTime: time.Unix(1478218751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xe2\xb8\x13\x7f\xcf\x5f\x61\x95\x87\x7d\xf9\x42\x76\x97\xd5\x57\xa7\x48\x3c\xa4\xc1\x0b\x39\xd2\x04\xc5\x61\xbb\xfb\x94\x35\x89\x81\x1c\xa9\xcd\xd9\x4e\x7b\x55\xc5\xff\x7e\xb2\x13\xc0\x84\x1f\x8b\xf6\xda\xaa\x55\xe2\xf9\xcc\x78\x3c\xf3\x99\xf1\xa4\x03\x86\x11\x08\xa3\x04\xc0\xa1\x9f\x80\xaf\x7e\x00\xff\x07\xdc\x59\x12\x8d\x60\x08\x63\x37\x81\xc3\x9e\xd5\xb1\x3a\x20\x26\x95\x20\x40\xae\x08\xc0\x62\xdd\x2d\xa8\x90\xb8\x2c\x01\x5e\x48\xc2\x01\xc9\x0b\x59\xd0\xa5\x96\x66\x8c\x2e\x8a\x25\x58\x14\x25\x01\x98\xe6\x80\x93\x2e\xaf\x68\x5b\xd1\xea\x00\xc9\x58\x09\x5e\x0a\xb9\x02\x3f\xbb\xe2\xa7\xa3\x37\x39\xb2\xdd\x15\x56\xc7\xb2\x9e\x09\x17\x05\xa3\x0e\xf8\xf0\xf9\x83\x65\x75\x2e\xfe\x58\x1d\x80\x08\x7f\x2e\x32\x22\xae\xa1\x2c\xd1\x80\x1c\xcb\x02\x20\xc3\xaf\x8e\x05\x00\x00\xc5\x13\x5e\x12\x07\x64\x8c\xe3\x72\xc3\xd9\x5f\x24\x93\xb6\x12\xbe\xbd\x81\x9e\xb7\xc2\x94\x92\x12\x6c\xb7\x1a\xca\x89\x90\x98\x4b\x07\x30\xda\x5d\xe0\xa2\xac\x38\x71\x3e\x7d\xd4\x22\x42\x9f\x0b\xce\xe8\x13\xa1\xb2\x36\x0b\x40\x17\xdc\x8d\x5c\x7f\x38\x50\x86\x46\x8c\x2d\x4b\xe2\x52\x5c\xbe\xca\x22\x13\xfe\x10\x6c\xb7\x77\x07\x9c\x3b\x4b\xc6\xa9\x17\xf8\x30\x4c\x52\x7f\x38\xc8\xf0\x6b\x5b\xa8\xfe\x45\xb1\x9f\xfc\xd0\xe6\x62\xc6\xe4\x2c\x0e\xc0\x76\x6b\xe3\x4a\xae\xec\x8c\x51\x4a\x32\x69\x28\xc1\x60\x32\x8e\xe2\x30\x9d\xc5\x41\x5b\x83\x94\xeb\x15\xe3\xd4\xdc\x01\x4d\xce\x01\xb1\x58\xe7\x6d\x3f\x60\xe8\xde\x07\x70\x38\x90\xbc\x22\x86\x2c\x89\x67\x28\x19\x2c\x70\x29\x9a\x55\x4a\xe4\x0b\xe3\x6b\x71\x08\xc6\x1c\x67\xeb\xae\x58\x91\x72\xa1\xc2\xff\xf6\x06\x8a\x05\xe8\xa1\x12\x67\xeb\x90\xc9\x62\x51\x64\x58\x16\x8c\x0a\x48\xf1\xbc\x24\x39\xe8\xea\x98\x0b\x25\xbf\x9c\x27\x2d\xee\xce\x59\x45\x33\xc2\x9d\x12\x4b\x22\xe4\xef\x65\x6a\x1a\xc5\xc9\xe0\x8f\x8f\xc6\x91\x50\xe0\x7a\x87\xb0\x68\x47\xc7\x8c\xad\x8f\x13\x57\x83\xbc\xb1\x1b\x86\xd0\x00\x1e\x78\x73\x6a\x10\xc1\x38\x74\x1f\xe0\x00\x8b\xf5\x9c\xc9\x13\xb9\xef\x45\x61\x0a\x1f\xa2\x3f\xfd\x81\xf3\x77\x45\x84\x0a\x8a\x63\x46\xda\x8d\x47\x30\xd1\x7e\xad\xa4\xdc\x38\xb6\x4e\x93\x6d\x20\x1e\xdc\xe9\xd4\x0f\x47\x68\x70\x43\x26\xd4\x42\x4e\x36\x84\xe6\x22\x65\xf4\x00\x51\x36\x75\x96\xba\x80\xd0\x5c\xf1\xdf\xd2\x15\x9a\x5f\xce\x85\x96\xbe\x47\xd1\x28\x36\x8e\x23\x94\x0c\x3e\xf6\xf4\xaf\x73\x94\x16\x25\x0d\xa2\xd1\xc8\x0f\x47\x69\x00\xbf\xc1\x60\xf0\xa9\x25\x7d\x88\xc2\x51\x94\xce\x62\x7f\xf0\xc4\xe8\x92\xe5\x73\xc7\xb6\xf5\x69\xbb\xfa\xdd\x56\x24\x69\xa9\xd4\xac\x4e\xbd\x28\x46\x83\x24\x9e\xc1\x96\x58\x33\x7f\x3a\xbb\x0f\x7c\x2f\x9d\xc0\xba\x04\xdd\x4a\xae\xa6\xd5\xbc\x2c\xb2\x09\x79\x6d\x55\x33\x9a\xa4\x31\xf4\xdc\x69\xe2\x8d\xdd\x14\x41\x2f\x86\x49\x5d\x5b\x24\xc3\x1b\x99\xad\x30\x22\x19\x27\x72\xaf\xf5\x5b\x29\x32\x8e\xa4\x92\xd3\x54\xf5\xe5\xfc\xec\x00\xef\x95\xa2\x16\x03\x4d\x22\xf7\xd3\xfb\x99\x37\x69\x0e\x8d\xfa\xf7\x55\xb6\x36\x4e\xbb\xc7\xb8\x08\x1e\xea\xab\x0f\x69\xbe\x61\x05\x6d\xe1\xdc\x47\x94\xc6\x70\xe4\x47\x61\x1d\xf5\x47\x14\x93\x65\xc1\xe8\x29\xca\xf5\x3c\x88\x90\xca\x4f\xda\x34\x5d\xf7\x11\xb9\x59\x46\x84\x98\x90\xd7\x93\x8e\x7b\xa4\x71\x02\x3f\x06\xef\x93\x79\x35\x8b\x75\x1f\x51\x2c\x41\x63\x38\x3c\x3a\x5e\xb1\x00\x94\x49\xd0\x9b\x09\x82\xfa\x60\xbb\x6d\x35\xda\x97\x22\x5f\x12\x29\xec\xb7\xb7\xa6\xda\x6a\x83\x67\x14\xf5\xfa\x33\x2b\xab\x27\x62\xb0\xa5\xb7\x4f\xae\x5d\x09\x6e\x0b\x9e\xd9\x78\xb3\xb1\xd5\x7d\x47\xf8\xce\xfa\xce\x64\x53\xcf\xff\xad\x35\xa8\x6e\x50\xc9\xd5\x95\x1b\x54\xbd\x74\x35\xe6\x3d\x08\xe7\x45\xb1\x1b\x34\x75\x78\xd2\xa9\x0d\xa1\xbe\x87\xd2\x69\x1c\x7d\xff\xd1\x2e\x64\x13\x15\x4d\x60\x98\xc2\xef\x53\x3f\xfe\x91\x26\xfe\x03\x1c\xf4\xff\x0f\x56\xfc\x3c\x78\xd7\x4e\x02\xa3\x9d\xa8\x73\x9d\xef\x26\xa6\xa3\xb1\xff\xcd\x4d\xe0\x71\xc7\xe0\xc5\x33\x96\xe4\x84\x61\xa6\xda\xcd\x7d\xc6\x50\x42\x10\x21\x3f\x0a\xcd\x66\x83\x88\x50\xd3\xd3\x39\x92\x1a\x8a\x6e\x10\x44\x8f\x70\xd8\x0c\x1f\x48\x8d\x1e\xa0\xc5\xce\x0c\x97\xa5\xe2\xc5\x79\x03\x71\x14\x25\x67\x87\x87\x4a\xae\xce\x6b\x0c\x7d\xa4\xbb\xed\xd7\xd8\x7d\x80\xa3\x99\x1b\x0f\x9b\x12\x51\x2c\x7f\x64\x3c\xdf\x70\x22\x04\xd8\x6e\x55\x02\x15\x61\x4b\x41\xc0\x76\xfb\xd5\x0d\x10\x6c\x55\xc8\x05\x02\xab\xbd\x2f\xf3\x77\x9f\x3b\xc5\xe2\x2b\xf3\x22\x00\x1d\x30\xc4\x12\xcf\xb1\x20\xe2\x3a\x54\x4d\x2a\x87\x76\x7c\x54\x15\xf5\x4a\xbf\xf7\xf9\x57\xc4\x3f\xa9\x6a\xd3\xa2\x9d\x63\x89\xed\x7c\x7e\xd3\x6c\x75\x38\xe1\x3b\x79\x62\x18\xbc\xc5\x11\x1d\xfe\x5f\xc7\xf6\x91\xcc\xf5\xdc\x4e\xf8\xaf\xa3\x9b\xe1\x3c\x3f\x9e\xd7\xf1\xbc\x60\x82\x2d\xd4\xac\xae\x44\xc6\xec\x77\xa6\x3d\x7a\x0a\xa3\xbe\x4b\x1c\x9b\xc8\xec\xf0\xda\x40\xd4\x98\x73\xb6\xd3\xb6\x9a\xeb\x33\xe6\xf6\xcb\xcb\xcb\x51\x47\x6d\xf7\x54\xa5\xa2\x5d\xea\x66\x84\x4b\xe1\xd8\x9c\x31\x69\xf7\xf4\x92\x06\x6c\x98\x5a\x3e\x54\xc6\x6e\xca\x51\xf5\x33\x65\x5c\x95\xaa\xf9\x7c\x77\xec\xa3\xf6\x0f\x05\xe6\x6e\x7b\x0b\x5f\xbe\xf4\xd5\xdf\xdd\x59\xbf\xce\xe5\x4a\x0f\x97\x17\x4a\xe7\xd6\xdb\xc0\xc4\x37\x53\x63\xfd\xd2\x44\xcd\x08\xca\xeb\xc1\xb1\x5b\x66\xff\xa6\x0a\x14\xca\x88\xc1\x6e\x1c\xbd\xc2\x97\xfd\xe7\x20\x08\x9b\x43\x5f\xfd\x2c\x34\x23\xd3\xc4\xa4\x7e\xdc\x1d\x7e\xff\x56\x5f\x79\xb7\x6d\xfd\xad\x66\xe1\xd5\x9d\x0d\xa6\x9a\x94\xa9\xef\xc1\x7f\x24\xe1\x14\x97\x0e\xd0\x5f\x55\x67\xca\xfa\x14\x71\xd2\x83\xda\x90\x7f\x03\x00\x00\xff\xff\x05\xbf\x27\x71\xf1\x0f\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 4081, mode: os.FileMode(420), modTime: time.Unix(1485971370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6e\xc3\x20\x10\x44\xef\x7c\xc5\x94\x9c\x71\xee\xb9\xb6\xbd\x55\x51\xa4\xa8\x1f\x40\xf1\xa6\x46\xc5\x60\xb1\x38\x6e\x64\xf9\xdf\x2b\x70\xdc\x3a\xee\x09\xc4\xcc\x32\x6f\x76\xf7\xb4\xff\xb0\x7e\xcf\x8d\x10\x4c\x09\x8a\x84\x20\xd3\x04\xc8\x53\xef\x9c\xf5\x9f\x60\x8a\x57\x6b\x08\x4e\xdf\x28\xf2\x41\xde\x65\x29\x44\x1d\xcc\x17\x45\x65\x42\xdb\x05\x26\x74\xbd\x73\xcb\xf0\x5b\x31\x97\x27\xaa\xab\xd5\xcc\x7c\x79\x8e\xa4\x53\xfe\x3c\x35\xb4\x04\x30\x7c\x18\x0e\xbf\x16\x29\xc4\x0e\xe7\xa4\x63\x7a\x30\x55\xdb\xd4\xbe\x83\xaa\xff\x86\xe6\xf3\xbc\x7c\x69\x72\x50\x21\x18\x47\xd8\x0b\xaa\x93\x66\x1e\x42\xac\x31\x4d\x9b\x99\x63\x18\x66\x7b\xe6\xea\x99\xe2\xba\xea\x0e\x05\x99\x0a\x4b\x16\xff\x71\xc4\xde\x43\xa9\xd8\x42\xf7\xa9\x81\x71\xf6\x9e\x0d\x75\x81\x52\xd4\x6a\xeb\x20\xc7\x11\xd5\x6b\xb9\x4e\x93\x84\x52\xdd\x42\x53\x94\x15\x5b\x16\xbd\x6e\x69\x16\x5e\x2c\x77\x4e\xdf\x8e\xf9\x61\x9a\xe4\xb6\xed\x3b\x53\xc4\xa0\xd7\x6d\x1f\x0d\x27\x47\x3a\x23\x52\x1b\xae\xb9\x82\x65\x5c\xac\x23\x68\x86\x4d\x30\xc1\x27\x6d\x3d\x97\x6e\x9d\xd3\xd6\x27\xfa\x4e\x58\xd8\xe6\xdd\x91\x2f\x2b\xfb\x09\x00\x00\xff\xff\x1b\x30\xfc\xf6\x2e\x02\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 558, mode: os.FileMode(420), modTime: time.Unix(1476995253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

