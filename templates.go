// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x6f\xdb\x30\x0c\x85\xef\xfa\x15\x0f\xd0\x75\x8e\x0f\xcd\x29\xb7\x02\xf1\xb6\x02\x43\x03\x34\xe9\xbd\x9a\xcd\x44\x42\x55\x29\x10\xe9\xba\x85\xe1\xff\x3e\x44\x76\xb3\x35\xa9\xb1\x93\xc0\x47\xf2\x3d\x7e\x90\xc6\x7a\x83\xfb\xcd\x0e\xd5\xfa\x6e\x87\xef\x77\xbf\xaa\x6f\xb8\x7d\xdc\x6d\x7e\x54\xf7\xd5\xc3\xed\xae\x5a\x2f\x94\x56\x1a\x0f\xd4\x32\x41\x2c\xc1\xf0\x73\xe1\x02\x8b\xf1\x1e\x66\x2f\x94\x40\x8d\x13\x17\x0e\xb9\x5b\xc7\xb0\x77\x07\xec\x9d\x27\x98\xd0\x20\x51\x91\xda\x70\xb9\xa8\x34\x24\x46\x8f\xce\x89\xc5\x53\xc1\x4f\xab\x1c\xf2\xc9\xbb\x60\xa5\x95\xea\x7b\x2c\x7e\x46\x96\x60\x5e\x08\xc3\x80\x5e\x29\x40\x9f\x06\x1b\x1c\x53\x7c\x7b\x57\x18\x5f\x94\x27\xad\x84\x15\x39\xae\xca\xa9\xe8\x15\x80\x9c\x12\x5b\x19\x27\xb2\x22\xc9\x04\x3e\x9a\x44\x41\x14\x30\x8c\x9e\xe4\x9f\x6d\x4c\xe1\xd2\x76\x92\xcf\xce\x53\xbd\x5a\x2e\x97\xcb\xab\x84\xa9\x39\x1f\x62\x5a\xb1\x57\x87\xb7\x62\xff\x1e\x9e\x8b\xcb\xc3\x5b\xb1\x73\x9e\x7d\x0f\xb7\x47\x88\x82\xc5\x23\xd3\xf6\x06\xc5\x30\xe4\x28\x16\x23\xae\xce\x5f\xc1\x0a\x48\x31\x0a\xca\x57\x93\xca\xae\xeb\xf2\x5e\x01\xf2\x4c\xe7\xf9\xb5\x63\xf3\xdb\x53\x03\xc3\xd8\xde\xa0\x33\x0c\x0a\x59\xc9\xed\x2b\x43\xfd\xb5\x65\x68\x30\x4c\xb0\xb5\xf9\x87\xf2\x03\xb0\x36\xef\x1f\x7c\x33\xa7\x9f\x56\xb7\x94\x5e\x89\xd1\xb9\xe6\x40\x02\x2b\x2f\x3e\x37\xe8\xad\xa6\xa3\xa0\x1c\x75\x9e\x5c\x3e\x81\xfc\x17\x65\x84\x99\x09\xd0\xf3\x11\x67\xb0\x2f\xbe\x61\x50\x7f\x02\x00\x00\xff\xff\x3e\x32\xb0\x75\x48\x03\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 840, mode: os.FileMode(420), modTime: time.Unix(1476824429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdd\x6e\xe2\x38\x14\xbe\xcf\x53\x58\xe5\x62\x6e\x16\x32\x33\x8c\x56\xab\x48\x5c\xa4\xc1\x4b\x23\x32\x04\xc5\x61\x3a\x73\x95\x31\xc9\x81\x64\x49\x6d\x64\x3b\xb0\xa8\xe2\xdd\x57\x4e\x02\x0d\xe1\xa7\x68\xd5\x56\xad\x62\x9f\xef\x1c\x9f\xdf\xcf\xee\xa0\xa1\x8f\x26\x7e\x88\xf0\xd0\x0d\xd1\xdf\xae\x87\xff\x40\xf6\x2c\xf4\x47\x78\x82\x03\x3b\xc4\xc3\x9e\xd1\x31\x3a\x28\x80\x42\x02\x52\x29\x20\x2a\x57\xdd\x8c\x49\x45\xf3\x1c\xd1\x85\x02\x81\x20\xc9\x54\xc6\x96\xa5\x34\xe6\x6c\x91\x2d\xd1\x22\xcb\x01\x51\x96\x20\x01\x5d\x51\xb0\xb6\xa2\xd1\x41\x8a\xf3\x1c\x6d\x33\x95\xa2\xdf\x5d\xf9\xdb\x2a\x0f\x39\xb1\xdd\x95\x46\xc7\x30\x36\x20\x64\xc6\x99\x85\x3e\x7d\xfd\x64\x18\x9d\xab\x3f\x46\x07\x11\x10\x9b\x2c\x06\x79\x0b\x65\xc8\x1a\x64\x19\x06\x42\x31\xdd\x59\x06\x42\x08\x65\x2f\x74\x09\x16\x8a\xb9\xa0\xf9\x5a\xf0\x7f\x20\x56\xa6\x16\xbe\xbe\xa2\x9e\x93\x52\xc6\x20\x47\xfb\x7d\x09\x15\x20\x15\x15\xca\x42\x9c\x75\x17\x34\xcb\x0b\x01\xd6\x97\xcf\xa5\x08\xd8\x26\x13\x9c\xbd\x00\x53\x95\x59\x84\xba\xe8\x61\x64\xbb\xc3\x81\x36\x34\xe2\x7c\x99\x83\xcd\x68\xbe\x53\x59\x2c\xdd\x21\xda\xef\x1f\xde\x70\xf6\x2c\x7c\x8a\x1c\xcf\xc5\x93\x30\x72\x87\x83\x98\xee\xda\x42\xfd\xcf\x0f\xdc\xf0\x57\x69\x2e\xe0\x5c\xcd\x02\x0f\xed\xf7\x26\x2d\x54\x6a\xc6\x9c\x31\x88\x55\x43\x09\x7b\xe3\x27\x3f\x98\x44\xb3\xc0\x6b\x6b\x40\xbe\x4a\xb9\x60\xcd\x13\xc8\xf8\x12\x90\xca\x55\xd2\xf6\x03\x4f\xec\x47\x0f\x0f\x07\x4a\x14\xd0\x90\x85\xc1\x8c\x84\x83\x05\xcd\x65\xbd\xcb\x40\x6d\xb9\x58\xc9\xb7\x64\xcc\x69\xbc\xea\xca\x14\xf2\x85\x4e\xbf\xb6\x7d\x3d\xff\xa5\xf4\x23\x0a\xa0\x23\x7b\xf2\x49\x38\xf8\xdc\x2b\x7f\xad\xbf\x3e\xb7\xe2\xf6\xfc\xd1\xc8\x9d\x8c\x22\x0f\xff\xc0\xde\xe0\x4b\x4b\xfa\xdd\x9f\x8c\xfc\x68\x16\xb8\x83\x17\xce\x96\x3c\x99\x5b\xa6\x59\xc6\xd0\x2d\xd7\xa6\x02\xa9\x5a\x2a\x55\x86\x22\xc7\x0f\xc8\x20\x0c\x66\xb8\x25\x2e\xb3\x38\x9d\x3d\x7a\xae\x13\x8d\x71\x55\x4e\xbb\x50\xe9\xb4\x98\xe7\x59\x3c\x86\x5d\xab\x33\xc8\x38\x0a\xb0\x63\x4f\x43\xe7\xc9\x8e\x08\x76\x02\x1c\x56\x75\x82\x98\xae\x55\x9c\x52\x02\xb1\x00\x75\xd4\xba\x99\x78\xbd\x91\xc0\x1a\x58\x22\x23\xce\xde\x20\x8d\x90\x74\x71\xea\x0e\xb9\x5e\x9f\x03\xe0\xa3\x4a\xa4\x9b\x2f\x55\x6a\x6d\x99\xed\xa6\x23\xfd\xe8\x71\xe6\x8c\xeb\xa0\x49\xff\xb1\x88\x57\x8d\x68\x2b\x0b\xcf\x24\x0a\xf0\xc8\xf5\x27\x55\x36\x9f\x49\x00\xcb\x8c\xb3\x73\x94\xed\x38\x98\x10\x9d\xf7\xa8\x1e\x4c\xfb\x99\xd8\x71\x0c\x52\x8e\x61\x77\x36\x95\x27\x1a\x67\xf0\x53\xf0\xb1\x48\x37\xab\xf3\xfa\xda\x45\xd9\x02\x31\xae\x50\x6f\x26\x81\xf4\x0f\x69\x2b\x6d\x94\x6d\x41\x9e\xf0\x30\x7a\xb4\x09\xbe\x34\x92\xdb\x2c\x59\x82\x92\x66\x65\x6d\xc3\xf3\xe2\x05\x1a\xa5\xee\x1d\x2b\x63\x16\x52\x98\x52\xc4\x26\x5d\xaf\x4d\x4d\x7c\x20\x0e\xca\xb5\x23\x08\x58\x72\x38\xfd\x7f\x35\x8d\xae\x54\x39\xca\x85\x4a\x6f\x50\xa9\x5e\x74\x4b\xcc\x47\x74\x8b\xe3\x07\xb6\x57\x0f\x91\x1f\x84\x83\x93\x79\x6e\x08\x4b\x42\x8a\xa6\x81\xff\xf3\x57\x7b\x0a\x9b\x28\x7f\x8c\x27\x11\xfe\x39\x75\x83\x5f\x51\xe8\x7e\xc7\x83\xfe\x9f\x28\x15\x97\xc1\x07\x2e\xf0\x1a\x5c\xa0\xe3\xba\x4c\x05\x4d\x47\x03\xf7\x87\x1d\xe2\xd3\x71\x17\xd9\x86\x2a\x38\x6b\xa3\xa6\xda\xdd\x24\xd1\x50\x22\x98\x10\xd7\x9f\x34\x99\x82\x80\xd4\xd7\x68\xab\x13\xdb\x8a\xb6\xe7\xf9\xcf\x78\x58\xdf\x42\x44\xdf\x41\xa8\xd5\x7c\x31\xcd\x73\xdd\x17\x97\x0d\x04\xbe\x1f\x5e\xbc\x45\x0a\x95\xde\xa4\x26\x0d\xb8\xde\x64\xc7\x04\xeb\x56\xbb\x71\xbb\x23\xd4\x41\x43\xaa\xe8\x9c\x4a\x90\xb7\xa1\x06\x6a\x12\xde\x49\xeb\x56\x3b\xfd\xde\xd7\xf7\xba\xf3\x6c\xf4\x9a\x16\xcd\x84\x2a\x6a\x26\xf3\xfb\x6e\xc2\x63\x84\x1f\xe4\x49\xc3\xe0\x3d\x8e\x94\xe9\x7f\x3f\xb7\xcf\x30\x2f\x5f\x59\x20\xde\xcf\x6e\x4c\x93\xe4\xf4\x75\x45\xe7\x19\x97\x7c\xa1\x5f\x56\x5a\x94\x53\x3d\x2d\xd7\x38\xcc\xd1\x18\xfd\x8a\xb4\x4c\x50\xf1\xdb\xb2\x86\xdc\xe4\xd0\x06\x03\x6e\xa8\x30\xb7\xdb\xed\x09\xed\xb5\x89\x4f\xab\x94\x2e\x75\x63\x10\x4a\x5a\xa6\xe0\x5c\x99\xbd\x72\xab\x04\xac\xb9\xde\x7e\x6b\xf8\xc3\x3b\x42\x37\xf9\x94\x0b\x3d\x4f\xcd\xef\x87\x53\x1f\x4b\xff\x88\x77\x42\xf2\x07\x0b\xdf\xbe\xf5\xf5\xdf\xc3\x45\xbf\x2e\xd5\x4a\xaa\x8c\xb3\x2b\xa3\x73\x2f\x65\x37\xf1\x25\x7f\x1f\x16\x75\xd6\x1a\x49\xd9\xdd\xf7\xe4\x46\x93\xda\xd5\x9b\x4f\xef\x66\x3c\x75\x24\xd5\xe7\xc1\xe5\xe3\xaa\xba\x4d\xee\x3b\xfa\x47\xd5\x3b\x37\x4f\x6e\xf4\x57\xb3\xd0\xd5\x15\xf3\xaf\x02\xc1\x68\x6e\xa1\xf2\xe5\x7a\x61\x18\xcf\x11\x67\xcc\xd1\x86\xfc\x17\x00\x00\xff\xff\xcb\x99\xbd\xa3\x55\x0d\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 3413, mode: os.FileMode(420), modTime: time.Unix(1477515484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6e\xc3\x20\x10\x44\xef\x7c\xc5\x94\x9c\x71\xee\xb9\xb6\xbd\x55\x51\xa4\xa8\x1f\x40\xf1\xa6\x46\xc5\x60\xb1\x38\x6e\x64\xf9\xdf\x2b\x70\xdc\x3a\xee\x09\xc4\xcc\x32\x6f\x76\xf7\xb4\xff\xb0\x7e\xcf\x8d\x10\x4c\x09\x8a\x84\x20\xd3\x04\xc8\x53\xef\x9c\xf5\x9f\x60\x8a\x57\x6b\x08\x4e\xdf\x28\xf2\x41\xde\x65\x29\x44\x1d\xcc\x17\x45\x65\x42\xdb\x05\x26\x74\xbd\x73\xcb\xf0\x5b\x31\x97\x27\xaa\xab\xd5\xcc\x7c\x79\x8e\xa4\x53\xfe\x3c\x35\xb4\x04\x30\x7c\x18\x0e\xbf\x16\x29\xc4\x0e\xe7\xa4\x63\x7a\x30\x55\xdb\xd4\xbe\x83\xaa\xff\x86\xe6\xf3\xbc\x7c\x69\x72\x50\x21\x18\x47\xd8\x0b\xaa\x93\x66\x1e\x42\xac\x31\x4d\x9b\x99\x63\x18\x66\x7b\xe6\xea\x99\xe2\xba\xea\x0e\x05\x99\x0a\x4b\x16\xff\x71\xc4\xde\x43\xa9\xd8\x42\xf7\xa9\x81\x71\xf6\x9e\x0d\x75\x81\x52\xd4\x6a\xeb\x20\xc7\x11\xd5\x6b\xb9\x4e\x93\x84\x52\xdd\x42\x53\x94\x15\x5b\x16\xbd\x6e\x69\x16\x5e\x2c\x77\x4e\xdf\x8e\xf9\x61\x9a\xe4\xb6\xed\x3b\x53\xc4\xa0\xd7\x6d\x1f\x0d\x27\x47\x3a\x23\x52\x1b\xae\xb9\x82\x65\x5c\xac\x23\x68\x86\x4d\x30\xc1\x27\x6d\x3d\x97\x6e\x9d\xd3\xd6\x27\xfa\x4e\x58\xd8\xe6\xdd\x91\x2f\x2b\xfb\x09\x00\x00\xff\xff\x1b\x30\xfc\xf6\x2e\x02\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 558, mode: os.FileMode(420), modTime: time.Unix(1476995253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

