// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x6f\xdb\x30\x0c\x85\xef\xfa\x15\x0f\xd0\x75\x8e\x0f\xcd\x29\xb7\x02\xf1\xb6\x02\x43\x03\x34\xe9\xbd\x9a\xcd\x44\x42\x55\x29\x10\xe9\xba\x85\xe1\xff\x3e\x44\x76\xb3\x35\xa9\xb1\x93\xc0\x47\xf2\x3d\x7e\x90\xc6\x7a\x83\xfb\xcd\x0e\xd5\xfa\x6e\x87\xef\x77\xbf\xaa\x6f\xb8\x7d\xdc\x6d\x7e\x54\xf7\xd5\xc3\xed\xae\x5a\x2f\x94\x56\x1a\x0f\xd4\x32\x41\x2c\xc1\xf0\x73\xe1\x02\x8b\xf1\x1e\x66\x2f\x94\x40\x8d\x13\x17\x0e\xb9\x5b\xc7\xb0\x77\x07\xec\x9d\x27\x98\xd0\x20\x51\x91\xda\x70\xb9\xa8\x34\x24\x46\x8f\xce\x89\xc5\x53\xc1\x4f\xab\x1c\xf2\xc9\xbb\x60\xa5\x95\xea\x7b\x2c\x7e\x46\x96\x60\x5e\x08\xc3\x80\x5e\x29\x40\x9f\x06\x1b\x1c\x53\x7c\x7b\x57\x18\x5f\x94\x27\xad\x84\x15\x39\xae\xca\xa9\xe8\x15\x80\x9c\x12\x5b\x19\x27\xb2\x22\xc9\x04\x3e\x9a\x44\x41\x14\x30\x8c\x9e\xe4\x9f\x6d\x4c\xe1\xd2\x76\x92\xcf\xce\x53\xbd\x5a\x2e\x97\xcb\xab\x84\xa9\x39\x1f\x62\x5a\xb1\x57\x87\xb7\x62\xff\x1e\x9e\x8b\xcb\xc3\x5b\xb1\x73\x9e\x7d\x0f\xb7\x47\x88\x82\xc5\x23\xd3\xf6\x06\xc5\x30\xe4\x28\x16\x23\xae\xce\x5f\xc1\x0a\x48\x31\x0a\xca\x57\x93\xca\xae\xeb\xf2\x5e\x01\xf2\x4c\xe7\xf9\xb5\x63\xf3\xdb\x53\x03\xc3\xd8\xde\xa0\x33\x0c\x0a\x59\xc9\xed\x2b\x43\xfd\xb5\x65\x68\x30\x4c\xb0\xb5\xf9\x87\xf2\x03\xb0\x36\xef\x1f\x7c\x33\xa7\x9f\x56\xb7\x94\x5e\x89\xd1\xb9\xe6\x40\x02\x2b\x2f\x3e\x37\xe8\xad\xa6\xa3\xa0\x1c\x75\x9e\x5c\x3e\x81\xfc\x17\x65\x84\x99\x09\xd0\xf3\x11\x67\xb0\x2f\xbe\x61\x50\x7f\x02\x00\x00\xff\xff\x3e\x32\xb0\x75\x48\x03\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 840, mode: os.FileMode(420), modTime: time.Unix(1476824429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xe2\xb8\x13\x7f\xcf\x5f\x61\x95\x87\x7d\xf9\x42\x76\x97\xd5\x57\xa7\x48\x3c\xa4\xe0\xa3\x11\x59\x82\xe2\xd0\x6e\x9f\xb2\x26\x19\x20\x47\x6a\x23\xdb\xc0\xa1\x8a\xff\xfd\xe4\x24\x80\x09\x3f\x8a\xae\xd7\xaa\x55\xec\xf9\xcc\x78\x3c\xf3\x99\x19\x37\x50\x2f\x40\xc3\x20\x42\xb8\xe7\x45\xe8\x4f\xcf\xc7\xff\x43\xee\x38\x0a\xfa\x78\x88\x43\x37\xc2\xbd\x96\xd5\xb0\x1a\x28\x84\x95\x04\xa4\xe6\x80\xa8\x5c\x34\x33\x26\x15\xcd\x73\x44\xa7\x0a\x04\x82\x34\x53\x19\x9b\x15\xd2\x84\xb3\x69\x36\x43\xd3\x2c\x07\x44\x59\x8a\x04\x34\xc5\x8a\xd5\x15\xad\x06\x52\x9c\xe7\x68\x93\xa9\x39\xfa\xdd\x94\xbf\x9d\xe2\x90\x13\xdb\x4d\x69\x35\x2c\x6b\x0d\x42\x66\x9c\x39\xe8\xcb\xf7\x2f\x96\xd5\xb8\xfa\x63\x35\x10\x01\xb1\xce\x12\x90\xb7\x50\x96\xac\x40\x8e\x65\x21\x94\xd0\xad\x63\x21\x84\x50\xf6\x46\x67\xe0\xa0\x84\x0b\x9a\x2f\x05\xff\x0b\x12\x65\x6b\xa1\x80\x1c\xa8\x84\x02\x23\x40\x2a\x2a\x94\x83\x38\x6b\x4e\x69\x96\xaf\x04\x38\xdf\xbe\x16\x22\x60\xeb\x4c\x70\xf6\x06\x4c\x95\xf6\x10\x6a\xa2\x87\xbe\xeb\xf5\x3a\xef\xef\xa8\xd5\xe7\x7c\x96\x83\xcb\x68\xbe\x55\x59\x22\xbd\x1e\xda\xed\x1e\x8e\x38\x77\x1c\x3d\xc5\x5d\xdf\xc3\xc3\x28\xf6\x7a\x9d\x84\x6e\xeb\x42\xfd\x2f\x08\xbd\xe8\xb5\x30\x17\x72\xae\xc6\xa1\x8f\x76\x3b\x9b\xae\xd4\xdc\x4e\x38\x63\x90\x28\x43\x09\xfb\x83\xa7\x20\x1c\xc6\xe3\xd0\xaf\x6b\x40\xbe\x98\x73\xc1\xcc\x13\xc8\xe0\x12\x90\xca\x45\x5a\xa2\x18\xa8\x0d\x17\x0b\x79\xbc\xda\x84\x26\x8b\xa6\x9c\x43\x3e\xd5\x51\xd4\xc8\xeb\x61\x2c\xa4\x9f\x8a\xa3\x76\xf0\x29\x20\x51\xe7\x6b\xab\xf8\x75\xfe\xf8\x5a\x73\xdf\x0f\xfa\x7d\x6f\xd8\x8f\x7d\xfc\x8c\xfd\xce\xb7\x9a\xf4\x67\x30\xec\x07\xf1\x38\xf4\x3a\x6f\x9c\xcd\x78\x3a\x71\x6c\xbb\x70\xbe\x59\xac\x6d\x05\x52\xd5\x54\xf0\xd0\x7d\xf4\x71\xdc\x0d\x42\xd2\x89\xc2\x31\xae\x89\x8b\xa4\x8c\xc6\x8f\xbe\xd7\x8d\x07\xb8\xcc\x8a\xbb\x52\xf3\xd1\x6a\x92\x67\xc9\x00\xb6\xb5\x04\x93\x41\x1c\xe2\xae\x3b\x8a\xba\x4f\x6e\x4c\x70\x37\xc4\x51\x19\x6e\x48\xe8\x52\x25\x73\x4a\x20\x11\xa0\x0e\x5a\x37\x23\xae\x37\x52\x58\x02\x4b\x65\xcc\xd9\x11\x62\x5c\x49\x67\xa5\x4a\xf4\xf5\xc4\xec\x01\x9f\xce\x8d\x26\xcf\x5c\xa9\xa5\x63\x1b\xa4\x29\xa4\xa4\x1d\x3f\x8e\xbb\x83\xea\xb6\xa4\xfd\xb8\x4a\x16\xc6\x35\x4b\x0b\x2f\x24\x0e\x71\xdf\x0b\x86\x65\x18\x5f\x48\x08\xb3\x8c\xb3\x73\x94\xdb\xed\x62\x42\x74\xc0\xe3\xaa\xb0\xdc\x17\xe2\x26\x09\x48\x39\x80\xed\x59\x55\x9d\x68\x9c\xc1\x4f\xc1\x87\xec\xdc\x4c\xcb\xfb\x7b\x13\x65\x53\xc4\xb8\x42\xad\xb1\x04\xd2\x46\xbb\xdd\xd1\x46\xc1\x07\xf2\x84\x7b\xf1\xa3\x4b\xf0\xa5\x92\xda\x64\xe9\x0c\x94\xb4\x4b\x6b\x6b\x9e\xaf\xde\xc0\xc8\x71\xeb\x90\x12\x7b\x25\x85\x2d\x45\x62\xd3\xe5\xd2\xd6\x1d\x0b\xc4\x5e\xb9\x72\x04\x01\x4b\xf7\xa7\xff\x2b\xb6\xe8\x4c\x15\xc5\xbb\x52\xf3\x1b\x3d\x50\x2f\x9a\x05\xe6\x53\x34\xe9\x06\xa1\xeb\x57\x65\x13\x84\x51\xe7\xa4\x82\x0d\x61\x14\x8e\x49\x14\x8f\xc2\xe0\xd7\x6b\xbd\xee\x4c\x54\x30\xc0\xc3\x18\xff\x1a\x79\xe1\x6b\x1c\x79\x3f\x71\xa7\xfd\x7f\x34\x17\x97\xc1\xfb\xea\xf7\x8d\xea\xd7\x17\xba\x5c\xfc\xa6\xa3\xa1\xf7\xec\x46\xf8\xb4\xc0\x45\xb6\xa6\x0a\xce\xf8\x63\xaa\xdd\xdd\x16\x0c\x25\x82\x09\xf1\x82\xa1\xd9\x1b\x08\x48\x3d\xf8\x6a\x14\xac\x2b\xba\xbe\x1f\xbc\xe0\x5e\x35\x3e\x88\x1e\x1e\xa8\xc6\xba\x84\xe6\xb9\x26\xc4\x65\x03\x61\x10\x44\x17\xdb\xff\x4a\xcd\x6f\x36\x23\x0d\xb8\xce\xae\x43\x80\x35\xc7\x6e\xcc\x63\x84\x1a\xa8\x47\x15\x9d\x50\x09\xf2\x36\xd4\x42\x66\x8b\x3b\xe1\x6c\xb9\xd3\x6e\x7d\xff\x88\x9d\x67\x35\x67\x5a\xb4\x53\xaa\xa8\x9d\x4e\xee\x1b\x7a\x87\x1b\xfe\x47\x9e\x18\x06\xef\x71\xa4\x08\xff\xc7\xb1\x7d\x81\x49\xf1\x2e\x02\xf1\x71\x74\x13\x9a\xa6\xa7\xef\x21\x3a\xc9\xb8\xe4\x53\xfd\x16\xd2\xa2\x9c\xea\x6a\xb9\xd6\xbc\xba\x1a\xa3\xdf\x7d\x8e\x0d\x2a\x39\x2e\x2b\xc8\xcd\xe6\x69\xb4\xbe\x35\x15\xf6\x66\xb3\x39\xe9\x77\xf5\x8e\xa7\x55\x0a\x97\x9a\x09\x08\x25\x1d\x5b\x70\xae\xec\x56\xb1\x55\x00\x96\x5c\x6f\x1f\x09\xbf\x7f\x39\x68\x92\x8f\xb8\xd0\xf5\x64\x7e\x3f\x9c\xfa\x58\xf8\x47\xfc\x93\xee\xbe\xb7\xf0\xe3\x47\x5b\xff\x3d\x5c\xf4\xeb\x52\xae\xa4\xca\x38\xbb\x52\x3a\xf7\xf6\x6a\x13\x5f\x34\xee\xfd\xa2\x8a\x9a\x11\x94\xed\x7d\x8f\x64\x34\xac\x5c\xbd\xf9\x58\x36\xef\x53\xdd\xa4\xfc\xdc\xbb\x7c\x58\x95\x63\xe4\xbe\xa3\x9f\x4b\xee\xdc\x3c\xd9\xe0\x97\x99\xe8\x72\xc4\xfc\xad\x40\x30\x9a\x3b\x68\x4a\xf3\x62\x22\xd5\x8b\xf1\x1c\x71\xd6\x39\xea\x90\x7f\x02\x00\x00\xff\xff\xbc\x64\x5d\xc1\x07\x0d\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 3335, mode: os.FileMode(420), modTime: time.Unix(1476909016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x3d\x3b\xbd\xf7\x0a\x5c\xab\x4a\x15\x1f\xb0\x38\x5b\xb2\x22\xb1\x23\xaf\xd3\x80\xa2\xfc\x3b\x72\x42\x44\x5b\x4e\xb6\x3c\xb3\xde\x37\xb3\x7b\xda\xbf\x4b\xd8\x6b\x63\x8c\x72\x86\x63\x63\xd8\x37\x11\xf6\x39\x31\x65\x09\x1f\xc8\x0d\x43\x39\x5d\xc5\xb3\x22\xc4\xf1\x60\x37\x8b\x35\x66\x87\x73\xa6\x94\xef\x4c\x95\xa9\xa3\xff\xe4\xe4\x7c\xec\xfa\xa8\x8c\xa1\x87\xab\xff\x86\xd6\xf3\xbc\x7d\xe9\xcb\x22\xae\x2b\x6b\xa6\x09\x72\x41\x75\x22\xd5\x31\xa6\x1a\xf3\xfc\x30\x73\x8c\xe3\x6a\x2f\x5c\x83\x72\x3a\xd8\x5b\x94\x05\x99\x17\x96\x22\xfe\xe3\x48\x43\x80\x73\xa9\x03\x0d\xb9\x81\x6f\xe5\x77\x37\xdc\x05\xce\x71\x47\xd2\xc2\x4e\x13\xaa\xd7\xe5\x3a\xcf\x16\xce\xf5\x1b\xcd\xa2\xdc\xb0\x15\x31\x50\xc7\xab\xf0\x22\xda\xb7\xf4\x7d\x2c\x0f\xf3\x6c\x1f\xd3\xbe\x29\x27\x8c\x74\x9b\xf6\xde\x70\x6a\x99\x0a\x22\x77\xf1\x5a\x22\x88\xe2\x22\x2d\x83\x14\x92\xe1\x63\xc8\x24\x41\x97\x6c\x7d\x4b\x12\x32\x7f\x65\x6c\x6c\x6b\x77\x1c\x96\xca\x7e\x02\x00\x00\xff\xff\xc0\x19\x53\xa3\xd2\x01\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 466, mode: os.FileMode(420), modTime: time.Unix(1476814501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

