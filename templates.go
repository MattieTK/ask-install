// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x6f\xdb\x30\x0c\x85\xef\xfa\x15\x0f\xd0\x75\x8e\x0f\xcd\x29\xb7\x02\xf1\xb6\x02\x43\x03\x34\xe9\xbd\x9a\xcd\x44\x42\x55\x29\x10\xe9\xba\x85\xe1\xff\x3e\x44\x76\xb3\x35\xa9\xb1\x93\xc0\x47\xf2\x3d\x7e\x90\xc6\x7a\x83\xfb\xcd\x0e\xd5\xfa\x6e\x87\xef\x77\xbf\xaa\x6f\xb8\x7d\xdc\x6d\x7e\x54\xf7\xd5\xc3\xed\xae\x5a\x2f\x94\x56\x1a\x0f\xd4\x32\x41\x2c\xc1\xf0\x73\xe1\x02\x8b\xf1\x1e\x66\x2f\x94\x40\x8d\x13\x17\x0e\xb9\x5b\xc7\xb0\x77\x07\xec\x9d\x27\x98\xd0\x20\x51\x91\xda\x70\xb9\xa8\x34\x24\x46\x8f\xce\x89\xc5\x53\xc1\x4f\xab\x1c\xf2\xc9\xbb\x60\xa5\x95\xea\x7b\x2c\x7e\x46\x96\x60\x5e\x08\xc3\x80\x5e\x29\x40\x9f\x06\x1b\x1c\x53\x7c\x7b\x57\x18\x5f\x94\x27\xad\x84\x15\x39\xae\xca\xa9\xe8\x15\x80\x9c\x12\x5b\x19\x27\xb2\x22\xc9\x04\x3e\x9a\x44\x41\x14\x30\x8c\x9e\xe4\x9f\x6d\x4c\xe1\xd2\x76\x92\xcf\xce\x53\xbd\x5a\x2e\x97\xcb\xab\x84\xa9\x39\x1f\x62\x5a\xb1\x57\x87\xb7\x62\xff\x1e\x9e\x8b\xcb\xc3\x5b\xb1\x73\x9e\x7d\x0f\xb7\x47\x88\x82\xc5\x23\xd3\xf6\x06\xc5\x30\xe4\x28\x16\x23\xae\xce\x5f\xc1\x0a\x48\x31\x0a\xca\x57\x93\xca\xae\xeb\xf2\x5e\x01\xf2\x4c\xe7\xf9\xb5\x63\xf3\xdb\x53\x03\xc3\xd8\xde\xa0\x33\x0c\x0a\x59\xc9\xed\x2b\x43\xfd\xb5\x65\x68\x30\x4c\xb0\xb5\xf9\x87\xf2\x03\xb0\x36\xef\x1f\x7c\x33\xa7\x9f\x56\xb7\x94\x5e\x89\xd1\xb9\xe6\x40\x02\x2b\x2f\x3e\x37\xe8\xad\xa6\xa3\xa0\x1c\x75\x9e\x5c\x3e\x81\xfc\x17\x65\x84\x99\x09\xd0\xf3\x11\x67\xb0\x2f\xbe\x61\x50\x7f\x02\x00\x00\xff\xff\x3e\x32\xb0\x75\x48\x03\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 840, mode: os.FileMode(420), modTime: time.Unix(1476824429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdd\x6e\xe2\x38\x14\xbe\xcf\x53\x58\xe5\x62\x6e\x16\x32\x33\x8c\x56\xab\x48\x5c\xa4\xc1\x4b\x23\x32\x04\xc5\x61\x3a\x73\x95\x31\xc9\x81\x64\x49\x6d\x64\x1b\x58\x54\xf1\xee\x2b\x27\x40\x4d\xf8\x29\x5a\xb5\x55\xab\xd8\xe7\x3b\xc7\xe7\xf7\xb3\x5b\xa8\x1f\xa2\x51\x18\x23\xdc\xf7\x63\xf4\xb7\x1f\xe0\x3f\x90\x3b\x89\xc3\x01\x1e\xe1\xc8\x8d\x71\xbf\x63\xb5\xac\x16\x8a\x60\x25\x01\xa9\x1c\x10\x95\x8b\x76\xc1\xa4\xa2\x65\x89\xe8\x4c\x81\x40\x90\x15\xaa\x60\xf3\x4a\x9a\x72\x36\x2b\xe6\x68\x56\x94\x80\x28\xcb\x90\x80\xb6\x58\xb1\xa6\xa2\xd5\x42\x8a\xf3\x12\x6d\x0a\x95\xa3\xdf\x6d\xf9\xdb\xa9\x0e\x39\xb1\xdd\x96\x56\xcb\xb2\xd6\x20\x64\xc1\x99\x83\x3e\x7d\xfd\x64\x59\xad\xab\x3f\x56\x0b\x11\x10\xeb\x22\x05\x79\x0b\x65\xc9\x3d\xc8\xb1\x2c\x84\x52\xba\x75\x2c\x84\x10\x2a\x5e\xe8\x1c\x1c\x94\x72\x41\xcb\xa5\xe0\xff\x40\xaa\x6c\x2d\x7c\x7d\x45\x1d\x2f\xa7\x8c\x41\x89\x76\xbb\x0a\x2a\x40\x2a\x2a\x94\x83\x38\x6b\xcf\x68\x51\xae\x04\x38\x5f\x3e\x57\x22\x60\xeb\x42\x70\xf6\x02\x4c\xd5\x66\x11\x6a\xa3\x87\x81\xeb\xf7\x7b\xda\xd0\x80\xf3\x79\x09\x2e\xa3\xe5\x56\x15\xa9\xf4\xfb\x68\xb7\x7b\x78\xc3\xb9\x93\xf8\x29\xf1\x02\x1f\x8f\xe2\xc4\xef\xf7\x52\xba\x6d\x0a\xf5\xbf\x30\xf2\xe3\x5f\x95\xb9\x88\x73\x35\x89\x02\xb4\xdb\xd9\x74\xa5\x72\x3b\xe5\x8c\x41\xaa\x0c\x25\x1c\x0c\x9f\xc2\x68\x94\x4c\xa2\xa0\xa9\x01\xe5\x22\xe7\x82\x99\x27\x90\xe1\x25\x20\x95\x8b\xac\x46\x31\x50\x1b\x2e\x16\xf2\x2d\xb4\x29\x4d\x17\x6d\x99\x43\x39\xd3\xc9\xd4\xc8\xeb\xd9\xac\xa4\x1f\x91\x4e\xed\xe7\x53\x48\xe2\xde\xe7\x4e\xf5\xeb\xfc\xf5\xb9\x11\x45\x10\x0e\x06\xfe\x68\x90\x04\xf8\x07\x0e\x7a\x5f\x1a\xd2\xef\xe1\x68\x10\x26\x93\xc8\xef\xbd\x70\x36\xe7\xd9\xd4\xb1\xed\x2a\x86\x76\xb5\xb6\x15\x48\xd5\x50\xc1\x23\xf7\x31\xc0\x89\x17\x46\xa4\x17\x47\x13\xdc\x10\x57\xb5\x19\x4f\x1e\x03\xdf\x4b\x86\xb8\x2e\x8e\xbb\x52\xf9\x78\x35\x2d\x8b\x74\x08\xdb\x46\x9d\xc9\x30\x89\xb0\xe7\x8e\x63\xef\xc9\x4d\x08\xf6\x22\x1c\xd7\x59\x87\x94\x2e\x55\x9a\x53\x02\xa9\x00\x75\xd4\xba\x99\x78\xbd\x91\xc1\x12\x58\x26\x13\xce\xde\x20\x46\x48\xba\x38\xfb\x7a\x5f\xaf\xcf\x01\xf0\x51\x25\xd2\xad\x94\x2b\xb5\x74\x6c\xa3\x85\x2a\x29\xe9\x26\x8f\x13\x6f\xb8\x0f\x9a\x74\x1f\x57\xe9\xc2\x88\xb6\xb6\xf0\x4c\x92\x08\x0f\xfc\x70\x54\x67\xf3\x99\x44\x30\x2f\x38\x3b\x47\xb9\x9e\x87\x09\xd1\x79\x4f\xf6\x63\xe6\x3e\x13\x37\x4d\x41\xca\x21\x6c\xcf\x66\xec\x44\xe3\x0c\x7e\x0a\x3e\x16\xe9\x66\x75\x5e\x5f\xdb\xa8\x98\x21\xc6\x15\xea\x4c\x24\x90\xee\x21\x6d\x95\x8d\xaa\x2d\xc8\x13\xee\x27\x8f\x2e\xc1\x97\x06\x6c\x53\x64\x73\x50\xd2\xae\xad\xad\x79\xb9\x7a\x01\xa3\xd4\x9d\x63\x65\xec\x95\x14\xb6\x14\xa9\x4d\x97\x4b\x5b\xd3\x18\x88\x83\xf2\xde\x11\x04\x2c\x3b\x9c\xfe\xbf\x9a\x46\x57\xaa\x1a\xe5\x95\xca\x6f\x10\xa3\x5e\xb4\x2b\xcc\x47\x74\x8b\x17\x46\x6e\xb0\x1f\xa2\x30\x8a\x7b\x27\xf3\x6c\x08\xe3\x68\x42\xe2\x64\x1c\x85\x3f\x7f\x35\xa7\xd0\x44\x85\x43\x3c\x4a\xf0\xcf\xb1\x1f\xfd\x4a\x62\xff\x3b\xee\x75\xff\x44\xb9\xb8\x0c\x3e\x70\x41\x60\x70\x81\x8e\xeb\x32\x15\x98\x8e\x46\xfe\x0f\x37\xc6\xa7\xe3\x2e\x8a\x35\x55\x70\xd6\x46\xa6\xda\xdd\x24\x61\x28\x11\x4c\x88\x1f\x8e\x4c\xa6\x20\x20\xf5\xa5\xd8\xe8\xc4\xa6\xa2\x1b\x04\xe1\x33\xee\xef\xef\x14\xa2\x6f\x14\xd4\x68\xbe\x94\x96\xa5\xee\x8b\xcb\x06\xa2\x30\x8c\x2f\xde\x09\x2b\x95\xdf\xa4\x26\x0d\xb8\xde\x64\xc7\x04\xeb\x56\xbb\x71\x57\x23\xd4\x42\x7d\xaa\xe8\x94\x4a\x90\xb7\xa1\x16\x32\x09\xef\xa4\x75\xeb\x9d\x6e\xe7\xeb\x7b\xdd\x79\x36\x7a\xa6\x45\x3b\xa3\x8a\xda\xd9\xf4\xbe\x9b\xf0\x18\xe1\x07\x79\x62\x18\xbc\xc7\x91\x2a\xfd\xef\xe7\xf6\x19\xa6\xd5\x9b\x09\xc4\xfb\xd9\x4d\x69\x96\x9d\xbe\x95\xe8\xb4\xe0\x92\xcf\xf4\x3b\x49\x8b\x4a\xaa\xa7\xe5\x1a\x87\x79\x1a\xa3\xdf\x84\x8e\x0d\x2a\x7d\x5b\xee\x21\x37\x39\xd4\x60\xc0\x35\x15\xf6\x66\xb3\x39\xa1\xbd\x26\xf1\x69\x95\xca\xa5\x76\x0a\x42\x49\xc7\x16\x9c\x2b\xbb\x53\x6d\x55\x80\x25\xd7\xdb\x6f\x0d\x7f\x78\x47\xe8\x26\x1f\x73\xa1\xe7\xc9\xfc\x7e\x38\xf5\xb1\xf2\x8f\x04\x27\x24\x7f\xb0\xf0\xed\x5b\x57\xff\x3d\x5c\xf4\xeb\x52\xad\xa4\x2a\x38\xbb\x32\x3a\xf7\x52\xb6\x89\xaf\xf8\xfb\xb0\xd8\x67\xcd\x48\xca\xf6\xbe\x07\x34\x1a\xed\x5d\xbd\xf9\x90\x36\xe3\xd9\x47\x52\x7f\x1e\x5c\x3e\xae\xea\xdb\xe4\xbe\xa3\x7f\xd4\xbd\x73\xf3\x64\xa3\xbf\xcc\x42\xd7\x57\xcc\xbf\x0a\x04\xa3\xa5\x83\x66\xb4\x94\x70\x61\x18\xcf\x11\x67\xcc\xd1\x84\xfc\x17\x00\x00\xff\xff\x29\xee\x02\xfd\x23\x0d\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 3363, mode: os.FileMode(420), modTime: time.Unix(1476911880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6e\xc3\x20\x10\x44\xef\x7c\xc5\x94\x9c\x71\xee\xb9\xb6\xbd\x55\x51\xa4\xa8\x1f\x40\xf1\xa6\x46\xc5\x60\xb1\x38\x6e\x64\xf9\xdf\x2b\x70\xdc\x3a\xee\x09\xc4\xcc\x32\x6f\x76\xf7\xb4\xff\xb0\x7e\xcf\x8d\x10\x4c\x09\x8a\x84\x20\xd3\x04\xc8\x53\xef\x9c\xf5\x9f\x60\x8a\x57\x6b\x08\x4e\xdf\x28\xf2\x41\xde\x65\x29\x44\x1d\xcc\x17\x45\x65\x42\xdb\x05\x26\x74\xbd\x73\xcb\xf0\x5b\x31\x97\x27\xaa\xab\xd5\xcc\x7c\x79\x8e\xa4\x53\xfe\x3c\x35\xb4\x04\x30\x7c\x18\x0e\xbf\x16\x29\xc4\x0e\xe7\xa4\x63\x7a\x30\x55\xdb\xd4\xbe\x83\xaa\xff\x86\xe6\xf3\xbc\x7c\x69\x72\x50\x21\x18\x47\xd8\x0b\xaa\x93\x66\x1e\x42\xac\x31\x4d\x9b\x99\x63\x18\x66\x7b\xe6\xea\x99\xe2\xba\xea\x0e\x05\x99\x0a\x4b\x16\xff\x71\xc4\xde\x43\xa9\xd8\x42\xf7\xa9\x81\x71\xf6\x9e\x0d\x75\x81\x52\xd4\x6a\xeb\x20\xc7\x11\xd5\x6b\xb9\x4e\x93\x84\x52\xdd\x42\x53\x94\x15\x5b\x16\xbd\x6e\x69\x16\x5e\x2c\x77\x4e\xdf\x8e\xf9\x61\x9a\xe4\xb6\xed\x3b\x53\xc4\xa0\xd7\x6d\x1f\x0d\x27\x47\x3a\x23\x52\x1b\xae\xb9\x82\x65\x5c\xac\x23\x68\x86\x4d\x30\xc1\x27\x6d\x3d\x97\x6e\x9d\xd3\xd6\x27\xfa\x4e\x58\xd8\xe6\xdd\x91\x2f\x2b\xfb\x09\x00\x00\xff\xff\x1b\x30\xfc\xf6\x2e\x02\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 558, mode: os.FileMode(420), modTime: time.Unix(1476995253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

