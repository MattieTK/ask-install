// Code generated by go-bindata.
// sources:
// templates/Caddyfile
// templates/docker-compose.yml
// templates/setup.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCaddyfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcf\x6a\xe3\x30\x10\x87\xef\x7a\x8a\x1f\xf8\xba\x8e\x0f\xcd\xa9\xb7\x42\xbc\xbb\x85\x25\x81\x26\xbd\x57\x6b\x8f\x63\x11\x55\x0a\x9a\x71\xdd\x62\xfc\xee\x8b\xa5\x34\x6d\xf3\x87\xb2\x27\x33\x33\xd2\x7c\xf3\x69\x9c\x61\xb1\xc2\x72\xb5\x41\xb9\xb8\xdf\xe0\xe7\xfd\x9f\xf2\x07\xee\x1e\x37\xab\x5f\xe5\xb2\x7c\xb8\xdb\x94\x8b\x99\xca\x54\x86\x07\xea\x98\x20\x2d\x41\xf3\x2e\x37\x8e\x45\x5b\x0b\xdd\x08\x05\x50\x6d\xc4\xb8\x6d\xac\x56\xde\x35\x66\x8b\xc6\x58\x82\x76\x35\x02\xe5\xa1\x73\xa7\x17\x55\x06\xf1\xde\xa2\x37\xd2\xe2\x29\xe7\xa7\xdb\x08\xf9\xd2\x3b\x67\x95\x29\x35\x0c\x98\xfd\xf6\x2c\x4e\x3f\x13\xc6\x11\x83\x52\x80\xf5\x5b\xb0\xd4\xbe\x93\x29\x1a\x06\x98\x06\xb3\xb5\xd5\xd5\x6e\xe9\xc5\x34\xa6\xd2\x62\xbc\xe3\xd2\xe9\xbf\x96\x6a\xe4\xe3\xa8\x80\x0c\x3c\x9d\xa8\x27\x48\x8d\x7d\xf0\xaf\x6f\x0a\xe9\x8b\x62\xca\x15\x68\x45\xf6\xb7\x45\x11\xcf\x15\x18\x14\x80\x38\xa2\xef\x24\x1d\x89\x19\x09\xda\xf1\x5e\x07\x72\xa2\x80\x31\x4e\x90\x83\x2c\xd3\x91\xf4\x2d\x22\x05\xff\x49\x70\x35\xc6\x51\x45\x00\xd9\x5d\xeb\x83\x3b\x65\x1c\xd2\x47\xcc\x21\xbe\x9d\xcf\xe7\xf3\x33\xdc\xa1\x78\x91\x98\x2c\x3a\x69\xcf\x2c\x3a\x69\x3f\x2c\x62\x70\x6a\xd1\x49\x7b\xad\x67\x5a\x95\xf3\x82\xd9\x23\xd3\xfa\xe6\x63\x35\xa2\xc5\x54\xf1\xb7\x61\x05\x04\xef\x05\xc5\x8b\x0e\x45\xdf\xf7\x97\x1e\x78\x61\x38\xed\x56\x33\xd6\x37\xe8\x35\x83\xd2\xb6\x63\xf9\xac\x61\x76\xb9\xe5\xa7\x17\xad\xf4\x27\xcb\x77\xc1\x4a\xbf\xbd\xfb\x5d\x19\x7d\xba\xba\xa6\xf0\x42\x8c\xde\xd4\x5b\x12\xb4\xf2\x6c\x63\x81\x5e\x2b\xda\x0b\x8a\x94\xe7\x43\x97\x2f\x22\xdf\xaa\x24\x99\x2b\x80\xec\x3a\xe2\x28\x76\x61\x0d\xa3\xfa\x17\x00\x00\xff\xff\x70\xa5\x12\xc5\xf4\x03\x00\x00")

func templatesCaddyfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesCaddyfile,
		"templates/Caddyfile",
	)
}

func templatesCaddyfile() (*asset, error) {
	bytes, err := templatesCaddyfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Caddyfile", size: 1012, mode: os.FileMode(420), modTime: time.Unix(1478218751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x51\x6f\xa3\x38\x10\x7e\xe7\x57\x58\xcd\xc3\xbe\x5c\xc2\xee\x76\x75\x3a\x21\xf1\x40\x89\x2f\xe1\x42\x21\xc2\x64\xbb\xfb\xc4\x3a\xe0\x24\x5c\xa8\x9d\xb3\x4d\x7b\x55\x95\xff\x7e\xb2\x21\x89\x43\xd2\x6c\xb4\xd7\x56\xad\xc0\xf3\x79\x18\xcf\x7c\xf3\x31\xf4\xc0\x30\x06\x51\x9c\x02\x38\x0c\x52\xf0\x67\x10\xc2\xdf\x80\x37\x4b\xe3\x11\x8c\x60\xe2\xa5\x70\x38\xb0\x7a\x56\x0f\x24\xa4\x16\x04\xc8\x15\x01\x58\xac\xfb\x25\x15\x12\x57\x15\xc0\x0b\x49\x38\x20\x45\x29\x4b\xba\xd4\xd6\x9c\xd1\x45\xb9\x04\x8b\xb2\x22\x00\xd3\x02\x70\xd2\xe7\x35\xed\x6e\xb4\x7a\x40\x32\x56\x81\xe7\x52\xae\xc0\x8f\xbe\xf8\xe1\xe8\x87\x1c\xf9\xee\x0b\xab\x67\x59\x4f\x84\x8b\x92\x51\x07\x7c\xf8\xfc\xc1\xb2\x7a\x6f\xfe\x58\x3d\x80\x08\x7f\x2a\x73\x22\x2e\xa1\x2c\xd1\x82\x1c\xcb\x02\x20\xc7\x2f\x8e\x05\x00\x00\xe5\x23\x5e\x12\x07\xe4\x8c\xe3\x6a\xc3\xd9\xdf\x24\x97\xb6\x32\xbe\xbe\x82\x81\xbf\xc2\x94\x92\x0a\x6c\xb7\x1a\xca\x89\x90\x98\x4b\x07\x30\xda\x5f\xe0\xb2\xaa\x39\x71\x3e\x7d\xd4\x26\x42\x9f\x4a\xce\xe8\x23\xa1\xb2\x71\x0b\x40\x1f\xdc\x8c\xbc\x60\xe8\x2a\x47\x23\xc6\x96\x15\xf1\x28\xae\x5e\x64\x99\x8b\x60\x08\xb6\xdb\x9b\x03\xce\x9b\xa5\xe3\xcc\x0f\x03\x18\xa5\x59\x30\x74\x73\xfc\xd2\x35\xaa\x7f\x71\x12\xa4\xdf\xb5\xbb\x84\x31\x39\x4b\x42\xb0\xdd\xda\xb8\x96\x2b\x3b\x67\x94\x92\x5c\x1a\x9b\x60\x38\x19\xc7\x49\x94\xcd\x92\xb0\xbb\x83\x54\xeb\x15\xe3\xd4\x7c\x02\x9a\x9c\x03\x62\xb1\x2e\xba\x71\xc0\xc8\xbb\x0b\xe1\xd0\x95\xbc\x26\x86\x2d\x4d\x66\x28\x75\x17\xb8\x12\xed\x2a\x25\xf2\x99\xf1\xb5\x38\x24\x63\x8e\xf3\x75\x5f\xac\x48\xb5\x50\xe9\x7f\x7d\x05\xe5\x02\x0c\x50\x85\xf3\x75\xc4\x64\xb9\x28\x73\x2c\x4b\x46\x05\xa4\x78\x5e\x91\x02\xf4\x75\xce\x85\xb2\xbf\x5d\x27\x6d\xee\xcf\x59\x4d\x73\xc2\x9d\x0a\x4b\x22\xe4\xaf\x55\x6a\x1a\x27\xa9\xfb\xc7\x47\xe3\x48\x28\xf4\xfc\x43\x5a\x74\xa0\x63\xc6\xd6\xc7\x85\x6b\x40\xfe\xd8\x8b\x22\x68\x00\x0f\xbc\x39\x75\x88\x60\x12\x79\xf7\xd0\xc5\x62\x3d\x67\xf2\xc4\x1e\xf8\x71\x94\xc1\xfb\xf8\xaf\xc0\x75\xfe\xa9\x89\x50\x49\x71\xcc\x4c\x7b\xc9\x08\xa6\x3a\xae\x95\x94\x1b\xc7\xd6\x65\xb2\x0d\xc4\xbd\x37\x9d\x06\xd1\x08\xb9\x57\x54\x42\x2d\x14\x64\x43\x68\x21\x32\x46\x0f\x10\xe5\x53\x57\xa9\x0f\x08\x2d\x14\xff\x2d\xdd\xa1\xc5\xdb\xb5\xd0\xd6\xf7\x68\x1a\xc5\xc6\x71\x8c\x52\xf7\xe3\x40\xff\x3a\x47\x65\x51\xd6\x30\x1e\x8d\x82\x68\x94\x85\xf0\x2b\x0c\xdd\x4f\x1d\xeb\x7d\x1c\x8d\xe2\x6c\x96\x04\xee\x23\xa3\x4b\x56\xcc\x1d\xdb\xd6\xa7\xed\xeb\x7b\x5b\x91\xa4\xb3\xa5\x61\x75\xe6\xc7\x09\x72\xd3\x64\x06\x3b\x66\xcd\xfc\xe9\xec\x2e\x0c\xfc\x6c\x02\x9b\x16\xf4\x6a\xb9\x9a\xd6\xf3\xaa\xcc\x27\xe4\xa5\xd3\xcd\x68\x92\x25\xd0\xf7\xa6\xa9\x3f\xf6\x32\x04\xfd\x04\xa6\x4d\x6f\x91\x1c\x6f\x64\xbe\xc2\x88\xe4\x9c\xc8\xfd\xae\x5f\x2a\x91\x71\x24\x55\x9c\xb6\xab\xdf\xae\xcf\x0e\xf0\x5e\x25\xea\x30\xd0\x24\xf2\x6d\x76\x37\xf3\x27\xed\xa1\xd1\xed\x5d\x9d\xaf\x8d\xd3\xee\x31\x1e\x82\x87\xfe\xba\x85\xb4\xd8\xb0\x92\x76\x70\xde\x03\xca\x12\x38\x0a\xe2\xa8\xc9\xfa\x03\x4a\xc8\xb2\x64\xf4\x14\xe5\xf9\x3e\x44\x48\xd5\x27\x6b\x45\xd7\x7b\x40\x5e\x9e\x13\x21\x26\xe4\xe5\x44\x71\x8f\x76\x9c\xc0\x8f\xc1\xfb\x62\x5e\xac\x62\xa3\x23\x8a\x25\x68\x0c\x87\x47\xc7\x2b\x17\x80\x32\x09\x06\x33\x41\xd0\x2d\xd8\x6e\x3b\x42\xfb\x5c\x16\x4b\x22\x85\xfd\xfa\xda\x76\x5b\xe3\xf0\xcc\x46\xbd\xfe\xc4\xaa\xfa\x91\x18\x6c\x19\xec\x8b\x6b\xd7\x82\xdb\x82\xe7\x36\xde\x6c\x6c\xf5\xbe\x23\x7c\xe7\x7d\xe7\xb2\xed\xe7\xff\x27\x0d\x4a\x0d\x6a\xb9\xba\xf0\x06\x55\x37\x7d\x8d\x79\x0f\xc2\xf9\x71\xe2\x85\x6d\x1f\x9e\x28\xb5\x61\xd4\xef\xa1\x6c\x9a\xc4\xdf\xbe\x77\x1b\xd9\x44\xc5\x13\x18\x65\xf0\xdb\x34\x48\xbe\x67\x69\x70\x0f\xdd\xdb\xdf\xc1\x8a\x9f\x07\xef\xe4\x24\x34\xe4\x44\x9d\xeb\xbc\x9a\x98\x81\x26\xc1\x57\x2f\x85\xc7\x8a\xc1\xcb\x27\x2c\xc9\x09\xc3\xcc\x6d\x57\xeb\x8c\xb1\x09\x41\x84\x82\x38\x32\xc5\x06\x11\xa1\xa6\xa7\x73\x24\x35\x36\x7a\x61\x18\x3f\xc0\x61\x3b\x7c\x20\x35\x7a\x80\x0e\x3b\x73\x5c\x55\x8a\x17\xe7\x1d\x24\x71\x9c\x9e\x1d\x1e\x6a\xb9\xba\xa8\x6e\x0a\xf0\x36\xc9\xf6\x09\x56\x54\xbb\x30\xd4\x01\xd0\x03\x43\x2c\xf1\x1c\x0b\x22\x2e\x43\xd5\x38\x71\xd0\xcc\x23\xea\x36\x2b\xb7\x83\xcf\x3f\x63\xe7\x49\xeb\x99\x1e\xed\x02\x4b\x6c\x17\xf3\xab\x06\xa0\xc3\x09\xdf\x29\x12\xc3\xe1\x35\x81\xe8\xf4\xff\x3c\xb7\x0f\x64\xae\x87\x6b\xc2\x7f\x9e\xdd\x1c\x17\xc5\xf1\x50\x8d\xe7\x25\x13\x6c\xa1\x06\x6a\x65\x32\x06\xb4\x33\x1a\xe6\x2b\x8c\xfa\x78\x70\x6c\x22\xf3\xc3\x6d\x0b\x51\xb3\xc8\x59\x39\xec\x28\xe0\x13\xe6\xf6\xf3\xf3\xf3\x91\xec\x75\x85\x4f\x6d\xd1\x21\xf5\x73\xc2\xa5\x70\x6c\xce\x98\xb4\x07\x7a\x49\x03\x36\x4c\x2d\x1f\x08\xbf\x1b\x45\x14\xc9\xa7\x8c\xab\x7e\x32\xaf\x6f\x8e\x63\xd4\xf1\xa1\xd0\x7c\xda\xde\xc3\x97\x2f\xb7\xea\xef\xe6\x6c\x5c\xe7\x6a\xa5\x27\xc0\x37\x5a\xe7\x5a\xc9\x36\xf1\xed\x68\xd7\xdc\xb4\x59\x33\x92\xf2\x72\x08\xec\x9a\x01\xbd\xed\x02\x85\x32\x72\xb0\x9b\x19\x2f\xf0\x65\xff\xcd\x06\xa2\xf6\xd0\x17\xbf\xdd\xcc\xcc\xb4\x39\x69\x2e\x77\x87\xdf\xdf\x35\xef\xa5\xeb\x1e\xfd\xb5\x61\xe1\xc5\x27\x1b\x4c\x35\x29\xd3\xbc\xac\xfe\x95\x84\x53\x5c\x39\x40\x7f\xfa\x9c\x69\xeb\x53\xc4\x89\x06\x75\x21\xff\x05\x00\x00\xff\xff\xdc\xda\xce\x3b\x96\x0f\x00\x00")

func templatesDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerComposeYml,
		"templates/docker-compose.yml",
	)
}

func templatesDockerComposeYml() (*asset, error) {
	bytes, err := templatesDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-compose.yml", size: 3990, mode: os.FileMode(420), modTime: time.Unix(1478218437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSetupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6e\xc3\x20\x10\x44\xef\x7c\xc5\x94\x9c\x71\xee\xb9\xb6\xbd\x55\x51\xa4\xa8\x1f\x40\xf1\xa6\x46\xc5\x60\xb1\x38\x6e\x64\xf9\xdf\x2b\x70\xdc\x3a\xee\x09\xc4\xcc\x32\x6f\x76\xf7\xb4\xff\xb0\x7e\xcf\x8d\x10\x4c\x09\x8a\x84\x20\xd3\x04\xc8\x53\xef\x9c\xf5\x9f\x60\x8a\x57\x6b\x08\x4e\xdf\x28\xf2\x41\xde\x65\x29\x44\x1d\xcc\x17\x45\x65\x42\xdb\x05\x26\x74\xbd\x73\xcb\xf0\x5b\x31\x97\x27\xaa\xab\xd5\xcc\x7c\x79\x8e\xa4\x53\xfe\x3c\x35\xb4\x04\x30\x7c\x18\x0e\xbf\x16\x29\xc4\x0e\xe7\xa4\x63\x7a\x30\x55\xdb\xd4\xbe\x83\xaa\xff\x86\xe6\xf3\xbc\x7c\x69\x72\x50\x21\x18\x47\xd8\x0b\xaa\x93\x66\x1e\x42\xac\x31\x4d\x9b\x99\x63\x18\x66\x7b\xe6\xea\x99\xe2\xba\xea\x0e\x05\x99\x0a\x4b\x16\xff\x71\xc4\xde\x43\xa9\xd8\x42\xf7\xa9\x81\x71\xf6\x9e\x0d\x75\x81\x52\xd4\x6a\xeb\x20\xc7\x11\xd5\x6b\xb9\x4e\x93\x84\x52\xdd\x42\x53\x94\x15\x5b\x16\xbd\x6e\x69\x16\x5e\x2c\x77\x4e\xdf\x8e\xf9\x61\x9a\xe4\xb6\xed\x3b\x53\xc4\xa0\xd7\x6d\x1f\x0d\x27\x47\x3a\x23\x52\x1b\xae\xb9\x82\x65\x5c\xac\x23\x68\x86\x4d\x30\xc1\x27\x6d\x3d\x97\x6e\x9d\xd3\xd6\x27\xfa\x4e\x58\xd8\xe6\xdd\x91\x2f\x2b\xfb\x09\x00\x00\xff\xff\x1b\x30\xfc\xf6\x2e\x02\x00\x00")

func templatesSetupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesSetupSh,
		"templates/setup.sh",
	)
}

func templatesSetupSh() (*asset, error) {
	bytes, err := templatesSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/setup.sh", size: 558, mode: os.FileMode(420), modTime: time.Unix(1476995253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Caddyfile": templatesCaddyfile,
	"templates/docker-compose.yml": templatesDockerComposeYml,
	"templates/setup.sh": templatesSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Caddyfile": &bintree{templatesCaddyfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{templatesDockerComposeYml, map[string]*bintree{}},
		"setup.sh": &bintree{templatesSetupSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

